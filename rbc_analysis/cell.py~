
class Cell( object ):

    def __init__( self,  fname, bndy, skiprows=0, shape=(203,198), verbose=False ):
        """
        Load a complete, concatenated cell text file.

        fname : path to file. 

        skiprows : skip the first 'skiprows'.

        shape : shape for resizing each frame. default=(203,198)

        square : dimension for reshaping boundary to and cell frames to a
        square matrix. necessary for lining them up, since even though
        boundary is centered correctly over cell, this only occurs when
        shapes of matrices _do not_ line up.
        """
        self.fname = fname
        self.shape = shape
        if shape[0] > shape[1]:
            self.square = shape[1]
        else:
            self.SQUARE = shape[0]
        self.verbose = verbose
        
        self.all_frames = np.loadtxt( fname, skiprows=skiprows, dtype=np.uint )
        if self.verbose:
            print "Loaded frames"
            
        self.frames = []
        for frame in self.all_frames:
            frame.resize( shape )
            self.frames.append( frame[:self.square,:self.square] )

        B = np.loadtxt( bndy )#, dtype=np.uint )
        B.resize( (shape[1],shape[0]) )
        self.boundary = B[:self.square,:self.square]

        if self.verbose:
            print "Done initializing frames and boundary"xs
